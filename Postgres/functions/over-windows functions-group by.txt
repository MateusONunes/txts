--https://www.postgresql.org/docs/current/functions-window.html

select t.val,
       row_number() over() row_number_,
       rank() over(order by t.val) rank_,
       dense_rank() over(order by t.val) dense_rank_,
       lag(t.val, 1) over(order by t.val) lag_, --Valor de tval no registro anterior (poderia ser posterior -1)
       lead(t.val, 1) over(order by t.val) lead_, --mesmo que lag(t.val, -1)
       ntile(3) over(order by t.val) ntile_, --dilui o 3 entre os registros
       percent_rank() over(order by t.val) percent_rank_,--?? Algo relacionado a rank
       cume_dist() over(order by t.val) cume_dist_,--?
       first_value(t.val) over(order by t.val) first_value_,
       last_value(t.val) over(order by t.val) last_value_, --??
       nth_value(t.val, 108) over(order by t.val) nth_value_ -- ?
--  from (select unnest(string_to_array('A-A-A-B-B-B-C-E', '-')) val) t
  from (select unnest(string_to_array('A-A-A-A-A-A-A-B-B-B-B-B-C-C', '-')) val) t
  
val|row_number_|rank_|dense_rank_|lag_|lead_|ntile_|percent_rank_     |cume_dist_        |first_value_|last_value_|nth_value_|
---+-----------+-----+-----------+----+-----+------+------------------+------------------+------------+-----------+----------+
A  |          1|    1|          1|    |A    |     1|               0.0|               0.5|A           |A          |          |
A  |          2|    1|          1|A   |A    |     1|               0.0|               0.5|A           |A          |          |
A  |          3|    1|          1|A   |A    |     1|               0.0|               0.5|A           |A          |          |
A  |          4|    1|          1|A   |A    |     1|               0.0|               0.5|A           |A          |          |
A  |          5|    1|          1|A   |A    |     1|               0.0|               0.5|A           |A          |          |
A  |          6|    1|          1|A   |A    |     2|               0.0|               0.5|A           |A          |          |
A  |          7|    1|          1|A   |B    |     2|               0.0|               0.5|A           |A          |          |
B  |          8|    8|          2|A   |B    |     2|0.5384615384615384|0.8571428571428571|A           |B          |          |
B  |          9|    8|          2|B   |B    |     2|0.5384615384615384|0.8571428571428571|A           |B          |          |
B  |         10|    8|          2|B   |B    |     2|0.5384615384615384|0.8571428571428571|A           |B          |          |
B  |         11|    8|          2|B   |B    |     3|0.5384615384615384|0.8571428571428571|A           |B          |          |
B  |         12|    8|          2|B   |C    |     3|0.5384615384615384|0.8571428571428571|A           |B          |          |
C  |         13|   13|          3|B   |C    |     3|0.9230769230769231|               1.0|A           |C          |          |
C  |         14|   13|          3|C   |     |     3|0.9230769230769231|               1.0|A           |C          |          |  

--------------------------------------------------------------------------------------------------------------------------------
--GROUPING SETS
    
select T.VAL,
       T.CODE,
       COUNT(0) CODE_QTDE,
       SUM(CODE) CODE_SUM
  from (
       select 'A' VAL, 1 CODE union all
       select 'A' VAL, 1 CODE union all
       select 'A' VAL, 1 CODE union all
       select 'B' VAL, 1 CODE union all
       select 'B' VAL, 2 CODE union all
       select 'C' VAL, 2 CODE union all
       select 'C' VAL, 2 CODE union all
       select 'D' VAL, 3 CODE union all
       select 'D' VAL, 1 CODE union all
       select 'D' VAL, 2 CODE union all
       select 'E' VAL, 3 CODE 
       ) T
 GROUP BY GROUPING SETS ((T.VAL), (T.CODE), (T.VAL, T.CODE), ()); --OU GROUP BY CUBE((T.VAL, T.CODE)
 
val|code|code_qtde|code_sum|
---+----+---------+--------+
   |    |       11|      19|
A  |   1|        3|       3|
C  |   2|        2|       4|
B  |   2|        1|       2|
E  |   3|        1|       3|
D  |   2|        1|       2|
D  |   1|        1|       1|
B  |   1|        1|       1|
D  |   3|        1|       3|
B  |    |        2|       3|
E  |    |        1|       3|
D  |    |        3|       6|
A  |    |        3|       3|
C  |    |        2|       4|
   |   1|        5|       5|
   |   2|        4|       8|
   |   3|        2|       6| 
 
-------------------------------------------------------------------------------------------------------------------------------- 
 --CUBE
 select T.VAL,
       T.CODE,
       COUNT(0) CODE_QTDE,
       SUM(CODE) CODE_SUM
  from (
       select 'A' VAL, 1 CODE union all
       select 'A' VAL, 1 CODE union all
       select 'A' VAL, 1 CODE union all
       select 'B' VAL, 1 CODE union all
       select 'B' VAL, 2 CODE union all
       select 'C' VAL, 2 CODE union all
       select 'C' VAL, 2 CODE union all
       select 'D' VAL, 3 CODE union all
       select 'D' VAL, 1 CODE union all
       select 'D' VAL, 2 CODE union all
       select 'E' VAL, 3 CODE 
       ) T
 GROUP BY CUBE (T.VAL, T.CODE) --o Rollup (T.VAL, T.CODE) faz alguma coisa parecida

val|code|code_qtde|code_sum|
---+----+---------+--------+
   |    |       11|      19|
A  |   1|        3|       3|
C  |   2|        2|       4|
B  |   2|        1|       2|
E  |   3|        1|       3|
D  |   2|        1|       2|
D  |   1|        1|       1|
B  |   1|        1|       1|
D  |   3|        1|       3|
B  |    |        2|       3|
E  |    |        1|       3|
D  |    |        3|       6|
A  |    |        3|       3|
C  |    |        2|       4|
   |   1|        5|       5|
   |   2|        4|       8|
   |   3|        2|       6|

-------------------------------------------------------------------------------------------------------------------------------- 
::first_value 
 select T.CODE,
       T.VAL,        
       first_value(t.val) over(partition by t.CODE order by t.code, t.val desc) LV
  from (
       select 'A' CODE, 1 VAL union all
       select 'A' CODE, 5 VAL union all
       select 'A' CODE, 3 VAL union all
       select 'B' CODE, 6 VAL union all
       select 'B' CODE, 2 VAL union all
       select 'C' CODE, 3 VAL union all
       select 'C' CODE, 1 VAL union all
       select 'D' CODE, 2 VAL union all
       select 'D' CODE, 0 VAL union all
       select 'D' CODE, 1 VAL union all
       select 'E' CODE, 2 VAL 
       ) T
 order by t.code, t.val 
       
code|val|fv|
----+---+--+
A   |  1| 5|
A   |  3| 5|
A   |  5| 5|
B   |  2| 6|
B   |  6| 6|
C   |  1| 3|
C   |  3| 3|
D   |  0| 2|
D   |  1| 2|
D   |  2| 2|
E   |  2| 2|

--------------------------------------------------------------------------------------------------------------------------------
 select T.*,
       count(0) over(partition by t.code) count_,
       sum(val) over(partition by t.code) sum_
  from (
       select 'A' CODE, 1 VAL union all
       select 'A' CODE, 5 VAL union all
       select 'A' CODE, 3 VAL union all
       select 'B' CODE, 6 VAL union all
       select 'B' CODE, 2 VAL union all
       select 'C' CODE, 3 VAL union all
       select 'C' CODE, 1 VAL union all
       select 'D' CODE, 2 VAL union all
       select 'D' CODE, 0 VAL union all
       select 'D' CODE, 1 VAL union all
       select 'E' CODE, 2 VAL 
       ) T
--------------------------------------------------------------------------------------------------------------------------------
code|val|count_|sum_|
----+---+------+----+
A   |  1|     3|   9|
A   |  5|     3|   9|
A   |  3|     3|   9|
B   |  6|     2|   8|
B   |  2|     2|   8|
C   |  3|     2|   4|
C   |  1|     2|   4|
D   |  2|     3|   3|
D   |  0|     3|   3|
D   |  1|     3|   3|
E   |  2|     1|   2|
--------------------------------------------------------------------------------------------------------------------------------
Sql similar ao anterior (window alias)
 select T.*,
       count(0) over w count_,
       sum(val) over w sum_
  from (
       select 'A' CODE, 1 VAL union all
       select 'A' CODE, 5 VAL union all
       select 'A' CODE, 3 VAL union all
       select 'B' CODE, 6 VAL union all
       select 'B' CODE, 2 VAL union all
       select 'C' CODE, 3 VAL union all
       select 'C' CODE, 1 VAL union all
       select 'D' CODE, 2 VAL union all
       select 'D' CODE, 0 VAL union all
       select 'D' CODE, 1 VAL union all
       select 'E' CODE, 2 VAL 
       ) T
  window w as (partition by t.code)

--------------------------------------------------------------------------------------------------------------------------------
================================================================================================================================
::rows between

create table teste as
(
select  1 codigo, 'A' grupo,  10 valor union all
select  2 codigo, 'A' grupo,  20 valor union all
select  3 codigo, 'A' grupo,  30 valor union all
select  4 codigo, 'A' grupo,  40 valor union all
select  5 codigo, 'A' grupo,  50 valor union all
select  6 codigo, 'B' grupo, 110 valor union all
select  7 codigo, 'B' grupo, 120 valor union all
select  8 codigo, 'B' grupo, 130 valor union all
select  9 codigo, 'B' grupo, 140 valor union all
select 10 codigo, 'C' grupo, 250 valor union all
select 11 codigo, 'C' grupo, 210 valor union all
select 12 codigo, 'C' grupo, 220 valor union all
select 13 codigo, 'C' grupo, 230 valor union all
select 14 codigo, 'C' grupo, 240 valor union all
select 15 codigo, 'C' grupo, 250 valor 
);



--UNBOUNDED => ilimitada
select t.*, 
       sum(valor) over(ROWS between UNBOUNDED preceding and current row) soma_todas_linhas_antes_e_atual,
       sum(valor) over(ROWS UNBOUNDED PRECEDING) idem,
       sum(valor) over(ROWS UNBOUNDED PRECEDING EXCLUDE CURRENT ROW) valor_anterior, --estranho, deveria somar todos os valores anterior excluindo o atual
       sum(valor) over(ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) somatotal,
       sum(valor) over(ROWS BETWEEN 1 PRECEDING AND CURRENT row) soma_1_linha_antes_e_atual,
       sum(valor) over(ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING) soma_1_linha_posterior_e_atual,
       sum(valor) over(partition by grupo ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING) soma_atual_e_2_seguintes_resetando_por_grupo,
       sum(valor) over(order by grupo) soma_agrupada_acumulando,
       sum(valor) over(partition by grupo) soma_agrupada_resetando_por_grupo,
       null x
  from teste t
 order by t.codigo 
